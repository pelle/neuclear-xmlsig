<?xml version="1.0"?>
<document>

	<properties>
		<title>Overview</title>
		<author email="pelle@neubia.com">Pelle Braendgaard</author>
	</properties>

	<body>		<section name="Introduction">
            <p>
                The API was designed for absolute simplicity.  Almost everything can be done through several simple Static methods in
                <a href="apidocs/org/neuclear/xml/xmlsec/XMLSecTools.html">org.neuclear.xml.xmlsec.XMLSecTools</a>.
            </p>
        </section>
        <section name="Signing of XML Documents">
            <p>
                To sign a piece of XML you need two things:
                <ul>
                    <li>A <a href="http://www.dom4j.org">Dom4J</a> XML <a href="http://www.dom4j.org/apidocs/org/dom4j/Element.html">Element</a></li>
                    <li>An RSA Private Key</li>
                </ul>
                Look at the following code snippet for an example:
            </p>
            <source><![CDATA[
// First we'll create a KeyPair
KeyPair signer=CryptoTools.createKeyPair();

Document doc=DocumentHelper.parseText("<test><test2/></test>");
Element elem=doc.getRootElement();

XMLSecTools.signElement("http://testsigs",elem,signer);
System.out.println(doc.asXML());
                  ]]>
            </source>
            <p>This will leave you with the Element looking like this</p>
            <source> <![CDATA[
<test>
    <test2/>
    <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
        <ds:SignedInfo>
            <ds:CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>
            <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
            <ds:Reference>
                <ds:Transforms>
                    <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
                    <ds:Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>
                </ds:Transforms>
                <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
                <ds:DigestValue>B/P2qMqBvrZCYSa5RDuKHY9s8j4=</ds:DigestValue>
            </ds:Reference>
        </ds:SignedInfo>
        <ds:SignatureValue>
            lxfaAtABT4aXaY/iMiv+BkgfD+yTOuSHV1v2qjLW2VrU9A/7k8kIuxbC1BNQAvV6ZX3klsKdf9fN
            /JkKNeMzceNVVWH+pIXtIP0SPQ5SYsk2tLIjoIM/y6MtDgLAOm2qBTqpDiQ0X3yOOw6wlNGJwTPA
            J+tTnpLKTamzxv8NyPRzWw46JS/rjXmx6PZWZzJ5An0EjGk45XoZFeXSrPu9p6M/00+uvOUxp6US
            08r/lAFiRcCRLfSpddSpPsdFc0FuCssuS0GIUuTC4NfPYK7/g3loerWqPRgc0JBo0TXrCGAo/gT8
            U1gVvN3XafwzumXYpSc6rCS9eTqpqWNhJSic5Q==
        </ds:SignatureValue>
    </ds:Signature>
</test>                  ]]>
            </source>
        </section>
        <section name="Verification of XMLSignatures">
            <p>
                To Verify you need an Element contaning an embedded XML signature and a RSA Public Key.
            </p>
            <source><![CDATA[
 if(XMLSecTools.verifySignature(doc.getRootElement(),signer.getPublic()))
    System.out.println("Signature was verified");
            ]]></source>
        </section>
        <section name="Canonicalization">
            <p>
                To Canonicalize a document according to <a href="http://www.w3.org/TR/2000/WD-xml-c14n-20001011">Canonical XML</a>.
                You need a document and a Writer.
            </p>
            <source><![CDATA[
Canonicalizer canon=new Canonicalizer(writer);//writer is a preinitialized instance of a java.io.Writer
canon.canonicalize(doc); // Canonicalizes the document or element and outputs it to the writer
            ]]></source>
        </section>
<!--        <section name="Encoding Public Key's in XML Documents">
            <p>

            </p>
        </section>-->
	</body>

</document>
